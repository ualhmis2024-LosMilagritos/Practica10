package org.ual.hmis.LosMilagritos;

//Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class ModificarNombreUsuarioCasoCorrectoTest {
	private WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;
	@Before
	public void setUp() { 
		int browser= 0; 
		Boolean headless = false;

		switch (browser) {
		case 0: 
			System.setProperty("webdriver.gecko.driver",  "drivers/geckodriver.exe");
			FirefoxOptions firefoxOptions = new FirefoxOptions();
//			if (headless) firefoxOptions.addArguments("--headless"); // .setHeadless(headless);
			firefoxOptions.setHeadless(true); 
			driver = new FirefoxDriver(firefoxOptions);
			break;

		case 1: 
			System.setProperty("webdriver.chrome.driver", "drivers/chromedriver.exe");
			ChromeOptions chromeOptions = new ChromeOptions();
//			if (headless) chromeOptions.addArguments("--headless"); // .setHeadless(headless);
			chromeOptions.setHeadless(true);
			driver = new ChromeDriver(chromeOptions);
			break;

		default:
			fail("Please select a browser");
			break;
		}

		js = (JavascriptExecutor) driver;
		vars = new HashMap<String, Object>();
	}
	@After
	public void tearDown() {
		driver.quit();
	}
	@Test
	public void modificarNombreUsuarioCasoCorrecto() {
		// Test name: Modificar Nombre Usuario Caso Correcto
		// Step # | name | target | value
		// 1 | open | https://my-app-1717583869591.azurewebsites.net/ | 
		driver.get("https://my-app-1717583869591.azurewebsites.net/");
		// 2 | Wait for vaadin-grid to be clickable
		WebDriverWait wait = new WebDriverWait(driver, 10);

		//Entrar como usuario a la app
		WebElement usernameField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("input-vaadin-text-field-6")));
		usernameField.sendKeys("user");

		WebElement passwordField = wait.until(ExpectedConditions.presenceOfElementLocated(By.id("input-vaadin-password-field-7")));
		passwordField.sendKeys("user");

		WebElement loginButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("vaadin-button:nth-child(2)")));
		loginButton.click();

		wait.until(ExpectedConditions.elementToBeClickable(By.tagName("vaadin-grid")));
		// 3 | click | css=vaadin-grid-cell-content:nth-child(34) | 
		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("vaadin-grid-cell-content:nth-child(34)"))).click();
		// 4 | Wait for id=input-vaadin-text-field-23 to be visible
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("input-vaadin-text-field-23")));
		// 5 | click | id=input-vaadin-text-field-23 | 
		driver.findElement(By.id("input-vaadin-text-field-23")).click();
		// 6 | assertValue | id=input-vaadin-text-field-23 | Eula
		{
			String value = driver.findElement(By.id("input-vaadin-text-field-23")).getAttribute("value");
			assertThat(value, is("Eula"));
		}
		// 7 | click | id=input-vaadin-text-field-23 | 
		driver.findElement(By.id("input-vaadin-text-field-23")).click();
		// 8 | type | id=input-vaadin-text-field-23 | paula
		driver.findElement(By.id("input-vaadin-text-field-23")).sendKeys("paula");
		// 9 | click | css=vaadin-button:nth-child(1) | 
		driver.findElement(By.cssSelector("vaadin-button:nth-child(1)")).click();
		// 10 | Wait for id=input-vaadin-text-field-23 to be visible
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("input-vaadin-text-field-23")));
		// 11 | assertValue | id=input-vaadin-text-field-23 | paula
		{
			String value = driver.findElement(By.id("input-vaadin-text-field-23")).getAttribute("value");
			assertThat(value, is("paula"));
		}
		// 12 | click | id=input-vaadin-text-field-23 | 
		driver.findElement(By.id("input-vaadin-text-field-23")).click();
		// 13 | type | id=input-vaadin-text-field-23 | Eula
		driver.findElement(By.id("input-vaadin-text-field-23")).clear(); // Clear the field first
		driver.findElement(By.id("input-vaadin-text-field-23")).sendKeys("Eula");
		// 14 | Wait for value 'Eula' in id=input-vaadin-text-field-23
		wait.until(ExpectedConditions.attributeToBe(By.id("input-vaadin-text-field-23"), "value", "Eula"));
		// 15 | click | css=vaadin-button:nth-child(1) | 
		driver.findElement(By.cssSelector("vaadin-button:nth-child(1)")).click();
		// 16 | Wait for id=input-vaadin-text-field-23 to be visible
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("input-vaadin-text-field-23")));
		// 17 | assertValue | id=input-vaadin-text-field-23 | Eula
		{
			String value = driver.findElement(By.id("input-vaadin-text-field-23")).getAttribute("value");
			assertThat(value, is("Eula"));
		}
	}
}
